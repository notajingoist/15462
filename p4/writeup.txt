
Describe the required features you have implemented, and which you have not.
if you have missing features, be sure to explain how much you accomplished.
Describe any major design decisions and descriptions of your algorithms.
You should detail anything you think we need to know to understand your code.

/**
 * 15-462 Project 4: Path Tracing - Write-Up 
 * Author: Jing Xiao 
 * AndrewID: jingxiao
 */

IMPLEMENTATION DETAILS:

Overview:
-Files edited: raytracer.cpp/hpp, scene.cpp/hpp, triangle.cpp/hpp,
model.cpp/hpp, sphere.cpp/hpp
-Files created: bbox.cpp/hpp

PATH TRACING:
-In place of the constant ambient term I calculated a "bd" term for every
intersection found
-To calculate this, I shot a subray (in a random cos_weighted_hemi(normal))
direction from the intersection, and recursively shot more subrays from those
new intersection points up to a randomly selected depth
-For each light source, I also shot a subray from the light source in a random
direction (the first subray used random_gaussian for the direction) and
recursively shot more subrays from those new intersection points up to a
randomly selected depth
-Along the way, I accumulated the colors by multiplying the diffuse and
texture colors at each intersection
-Finally, I connected the final intersection points for both the forward and
backward paths, and if there was no obstruction, I multiplied the forward and
backward color terms together, along with the light source color. Together,
this was the "bd" term
-I did not treat transparent and non-transparent objects differently; I simply
sampled the texture and colors for both kinds of objects in calculating bd


SPATIAL DATA STRUCTURES:
-I implemented bounding volume hierarchies with bounding boxes (Bbox) only (no
bounding spheres)
-A Bbox is a Geometry that contains a list of geometry indices, a list of all
the geometries in the scene, a left Bbox pointer, a right Bbox pointer, and
min and max x, y, and z bounding values
-Initializing a Bbox involves applying the surface area heuristic to split the
root Bbox into child Bbox nodes. I sort through the geometry indices based on
the geometry orderings given a particular axis, and then sum the bounding box
volumes of the left and right children. The axis that yields the smallest
volume is used to order the geometry indices. 
-Also, given the geometry indices, the Bbox's bounds were set by finding the 
minimum/maximum x, y, and z for all the geometries. This find_min_max function 
was a virtual function that all the geometry types implemented. For triangles,
I simply converted the vertices from local to world space and took the min and
max of the 3 vertices. (Similar for models; looped through the triangles.) For
spheres, I multiplied the radius by the scale, and took the largest
radius*scale component as the offset from the sphere's center position to
calculate the min and maxes.
-Since Bbox is a Geometry, it also implements the virtual intersects_ray
function. Its implementation checks whether the ray hits the box, in which
case it then recursively checks its children. If the Bbox is a leaf, it holds
only one geometry, in which case that geometry's intersects_ray function gets
called to provide the intersection information that gets propogated back up to
where the ray was first cast. If the ray does not hit the box, no further
checks are made with this ray.
-The check for whether the ray hits the box was taken partly from the textbook
and partly from this source:
http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/

Apologies:
-I didn't have time to take screenshots, sigh.
