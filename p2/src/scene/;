#include "scene/mesh.hpp"

namespace _462 {

bool Mesh::subdivide()
{
    /*
      You should implement loop subdivision here.

      Triangles are stored in an std::vector<MeshTriangle> in 'triangles'.
      Vertices are stored in an std::vector<MeshVertex> in 'vertices'.

      Check mesh.hpp for the Mesh class definition.
     */
/*
    even_vertices_size = vertices.size();

    build_adjacency_structure();
    first_pass();
    second_pass();    
*/
    std::cout << "Subdivision not yet implemented" << std::endl;
    return true;
}

void Mesh::build_edge(WingedEdge & e, unsigned int curr_index,
    unsigned int prev_index, unsigned int next_index, 
    unsigned int start_index, unsigned int end_index)

/*WingedEdge prev, WingedEdge next,
    WingedVertex start, WingedVertex end, WingedEdge sym) */
{
    e.curr_index = curr_index;
    e.prev_index = prev_index;
    e.next_index = next_index;
    e.start_index = start_index;
    e.end_index = end_index;
    e.sym_index = -1;
}

void Mesh::build_vertex(WingedVertex & v, 
    unsigned int vertices_index, unsigned int edge_index) 
{
    v.vertices_index = vertices.index;
    v.edge_index = edge_index;
}

void Mesh::build_adjacency_structure()
{

    for (unsigned int i = 0; i < triangles.size(); i++) {
        unsigned int i0 = triangles[i].vertices[0];
        unsigned int i1 = triangles[i].vertices[1];
        unsigned int i2 = triangles[i].vertices[2];
        unsigned int e_index = edge_list.size();
        unsigned int v_index = vertex_list.size();
        
        WingedEdge e0, e1, e2; // 0 1 2 
        WingedVertex v0, v1, v2; // 0 1 2
        
        build_edge(e0, e_index, e_index+2, e_index+1, 
                    v_index, v_index+1); 
        build_edge(e1, e_index+1, e_index, e_index+2, 
                    v_index+1, v_index+2);
        build_edge(e2, e_index+2, e_index+1, e_index,
                    v_index+2, v_index);

        build_vertex(v0, i0, e0.curr_index);
        build_vertex(v1, i1, e1.curr_index);
        build_vertex(v2, i2, e2.curr_index);

        vertex_list.push_back(v0);
        vertex_list.push_back(v1);
        vertex_list.push_back(v2);
        
        edge_list.push_back(e0);
        edge_list.push_back(e1);
        edge_list.push_back(e2); 

    }
    
/*
    unsigned int original_size = triangles.size();
    for (int i = 0; i < original_size; i++) {
        unsigned int i0 = triangles[i].vertices[0];
        unsigned int i1 = triangles[i].vertices[1];
        unsigned int i2 = triangles[i].vertices[2];
        
        Vector3 v0 = vertices[i0].position;
        Vector3 v1 = vertices[i1].position;
        Vector3 v2 = vertices[i2].position;

        adjacent_vertices
    }
*/
}

void Mesh::first_pass() 
{
/*
    //update vertices list with m new odd vertices
    //update triangles list with 

    //even vertices = vertices.size() before modifying with odd vertices
    
    for ab in edges
        
        faces = get_adjacent_faces(ab);
        leftFace = get_left_edge(ab);
        rightFace = get_right_edge(ab);

        leftE1 = leftFace.pred;
        leftE2 = leftFace.succ;

        rightE1 = rightFace.pred;
        rightE2 = rightFace.succ;
        if faces.size() > 1 then it's interior
            //interior case
            if (leftE1.start != a && leftE1.start != b) {
                c = leftE1.start;
                Vector3 new_v = create_interior_odd(a, b, c, d); 
                leftE1.end = 
            } else {
                c = leftE1.end;
            }

            if (rightE1.start != a && rightE1.start != b) {
                d = rightE1.start;
            } else {
                d = rightE1.end;
            }
                    else it's boundary
            //boundary case
*/
}

Vector3 Mesh::create_interior_odd(real_t a, real_t b, 
    real_t c, real_t d)
{
/*
    return (3.0/8.0) * (a + b) + (1.0/8.0) * (c + d);
*/
}

void Mesh::second_pass()
{
/*
    //for i=0; i < even_vertices.size() [aka size of unmodified vertices]
    //apply even vertices formula, change
    //vertices[i].position
*/
}


} /* _462 */













